/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  "/users": {
    get: operations["getAllUsers"];
  };
  "/user": {
    get: operations["getUser"];
    put: operations["updateUser"];
  };
  "/user/{id}": {
    get: operations["getUserById"];
  };
  "/user/preference": {
    get: operations["getUserPreference"];
    put: operations["updateUserPreference"];
  };
  "/user/password": {
    put: operations["updatePassword"];
  };
  "/user/disable": {
    put: operations["disableUser"];
  };
  "/user/enable": {
    put: operations["enableAccount"];
  };
  "/admin/user/disable/{id}": {
    put: operations["disableUserAdmin"];
  };
  "/admin/user/enable/{id}": {
    put: operations["enableUserAdmin"];
  };
  "/admin/user/validate/{id}": {
    put: operations["validateUser"];
  };
  "/admin/user/unvalidated": {
    get: operations["getUnvalidatedUsers"];
  };
  "/admin/user/role/admin/{id}": {
    put: operations["assignAdminRole"];
  };
  "/auth/login": {
    post: operations["getToken"];
  };
  "/auth/register": {
    post: operations["register"];
  };
  "/auth/revoke": {
    get: operations["revoke"];
  };
  "/auth/refresh": {
    get: operations["refresh"];
  };
  "/entity": {
    get: operations["getEntities"];
    post: operations["registerEntity"];
  };
  "/entity/{id}": {
    get: operations["getEntityById"];
  };
  "/admin/entity/validate/{id}": {
    put: operations["validateEntity"];
  };
  "/admin/entity/unvalidated": {
    get: operations["getEntitiesUnvalidated"];
  };
  "/admin/category/create": {
    post: operations["createCategory"];
  };
  "/admin/category/modify": {
    post: operations["modifyCategory"];
  };
  "/admin/category/disable/{id}": {
    put: operations["disableCategory"];
  };
  "/admin/category/reactivate/{id}": {
    put: operations["reactivateCategory"];
  };
  "/admin/user/password/{login}/": {
    put: operations["updatePasswordAdmin"];
  };
  "/category": {
    get: operations["getCategories"];
  };
  "/category/{id}": {
    get: operations["getCategory"];
  };
  "/publications": {
    get: operations["getAllPublications"];
  };
  "/publications/offers": {
    get: operations["getAllOffers"];
  };
  "/publications/requests": {
    get: operations["getAllRequests"];
  };
  "/publication": {
    get: operations["getMyPublications"];
    post: operations["createPublication"];
  };
  "/publication/offer": {
    get: operations["getMyOffers"];
  };
  "/publication/requests": {
    get: operations["getMyRequests"];
  };
  "/publication/{id}": {
    get: operations["getPublication"];
    put: operations["updatePublication"];
  };
  "/publication/close/{id}": {
    put: operations["closePublication"];
  };
  "/publication/reopen/{id}": {
    put: operations["reactivatePublication"];
  };
  "/publication/related/{id}": {
    put: operations["getRelatedPublications"];
  };
  "/messaging/send/{login}": {
    post: operations["sendMessageToUser"];
  };
  "/messaging/send/conversation/{id}": {
    post: operations["sendMessageToConversation"];
  };
  "/messaging/conversation/{id}": {
    get: operations["getConversation"];
  };
  "/messaging/conversation": {
    get: operations["getConversations"];
  };
}

export interface components {
  schemas: {
    User: {
      id?: string;
      login: string;
      password: string;
      firstName: string;
      lastName: string;
      email: string;
      phoneNumber?: string;
      /** Format: date */
      birthdate?: string;
      validated?: boolean;
      disabled?: boolean;
      /** Format: date */
      lastConnection?: string;
      role?: string;
      addressList: components["schemas"]["AddressList"];
    };
    UserPreference: {
      id?: string;
      publicBirthdate: boolean;
      publicEmail: boolean;
      publicLastName: boolean;
      publicFirstName: boolean;
      publicPhoneNumber: boolean;
      publicAddresses: boolean;
    };
    AddressList: components["schemas"]["Address"][];
    Address: {
      id?: string;
      street: string;
      number: string;
      city: string;
      postCode: string;
      country: string;
    };
    CustomFormFieldList: components["schemas"]["CustomFormField"][];
    CustomFormField: {
      initalValue?: string;
      label: string;
      name: string;
      required: boolean;
    };
    CustomFieldValueList: components["schemas"]["CustomFieldValue"][];
    CustomFieldValue: {
      name: string;
      value: string;
    };
    Entity: {
      id?: string;
      name: string;
      email?: string;
      phoneNumber?: string;
      validated?: boolean;
      addressList?: components["schemas"]["AddressList"];
      administrator?: string;
      /** Format: base64 */
      picture?: string;
    };
    UserRegistration: {
      username: string;
      password: string;
    };
    Login: {
      username: string;
      password: string;
    };
    Password: string;
    Token: {
      access_token: string;
      token_type: string;
      expires_in: number;
      refresh_token: string;
    };
    Category: {
      id?: string;
      name: string;
      /** @enum {string} */
      type: "OFFERS" | "REQUESTS";
      customFields?: components["schemas"]["CustomFormFieldList"];
      expirationInDays?: number;
      disabled?: boolean;
      /** Format: date */
      creationDate?: string;
      prioriy?: number;
    };
    Publication: {
      id?: string;
      categoryId?: string;
      /** @enum {string} */
      type: "OFFERS" | "REQUESTS";
      creator?: string;
      mandated?: string;
      /** Format: date */
      creationDate?: string;
      /** Format: date */
      lastUpdateDate?: string;
      expirationInDays?: number;
      title: string;
      message?: string;
      customValues?: components["schemas"]["CustomFieldValueList"];
      closed?: boolean;
      prioriy?: number;
      childPublicationId?: string[];
      parentpublicationId?: string;
      keywords?: string[];
    } & {
      category: unknown;
    };
    Message: {
      message: string;
      sender?: string;
      /** Format: date-time */
      creationDate?: string;
      read?: boolean;
    };
    MessageList: components["schemas"]["Message"][];
    Conversation: {
      id: string;
      correspondent: string;
      /** Format: date-time */
      creationDate: string;
      messages: components["schemas"]["MessageList"];
    };
    ConversationOverview: {
      id: string;
      correspondent: string;
      /** Format: date-time */
      lastUpdate: string;
      unreadMessages: number;
      lastMessage: components["schemas"]["Message"];
    };
  };
}

export interface operations {
  getAllUsers: {
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["User"][];
        };
      };
    };
  };
  getUser: {
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["User"];
        };
      };
    };
  };
  updateUser: {
    responses: {
      /** created */
      201: unknown;
      /** Not Found */
      404: unknown;
    };
    /** Update user based on token and body */
    requestBody: {
      content: {
        "application/json": components["schemas"]["User"];
      };
    };
  };
  getUserById: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["User"];
        };
      };
      /** Not Found */
      404: unknown;
    };
  };
  getUserPreference: {
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["UserPreference"];
        };
      };
      /** Not Found */
      404: unknown;
    };
  };
  updateUserPreference: {
    responses: {
      /** created */
      201: unknown;
      /** Not Found */
      404: unknown;
    };
    /** Update user preference based on token and body */
    requestBody: {
      content: {
        "application/json": components["schemas"]["UserPreference"];
      };
    };
  };
  updatePassword: {
    responses: {
      /** created */
      201: unknown;
      /** Not Found */
      404: unknown;
    };
    /** The new password */
    requestBody: {
      content: {
        "application/json": components["schemas"]["Password"];
      };
    };
  };
  disableUser: {
    responses: {
      /** created */
      201: unknown;
      /** Not Found */
      404: unknown;
    };
  };
  enableAccount: {
    responses: {
      /** created */
      201: unknown;
      /** Not Found */
      404: unknown;
    };
  };
  disableUserAdmin: {
    parameters: {
      path: {
        /** ID of an existing User */
        id: string;
      };
    };
    responses: {
      /** created */
      201: unknown;
      /** Not Found */
      404: unknown;
    };
  };
  enableUserAdmin: {
    parameters: {
      path: {
        /** ID of an existing User */
        id: string;
      };
    };
    responses: {
      /** created */
      201: unknown;
      /** Not Found */
      404: unknown;
    };
  };
  validateUser: {
    parameters: {
      path: {
        /** ID of an existing User */
        id: string;
      };
    };
    responses: {
      /** created */
      201: unknown;
      /** Not Found */
      404: unknown;
    };
  };
  getUnvalidatedUsers: {
    responses: {
      /** created */
      201: unknown;
      /** Not Found */
      404: unknown;
    };
  };
  assignAdminRole: {
    parameters: {
      path: {
        /** ID of an existing User */
        id: string;
      };
    };
    responses: {
      /** created */
      201: unknown;
      /** Not Found */
      404: unknown;
    };
  };
  getToken: {
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Token"];
        };
      };
    };
    /** Needs the User credentials for which we want to have the token */
    requestBody: {
      content: {
        "application/json": components["schemas"]["Login"];
      };
    };
  };
  register: {
    responses: {
      /** created */
      201: unknown;
    };
    /** Create a user */
    requestBody: {
      content: {
        "application/json": components["schemas"]["User"];
      };
    };
  };
  revoke: {
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Token"];
        };
      };
    };
  };
  refresh: {
    responses: {
      /** OK */
      200: unknown;
    };
  };
  getEntities: {
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Entity"][];
        };
      };
    };
  };
  registerEntity: {
    responses: {
      /** created */
      201: unknown;
    };
    /** Create an Entity */
    requestBody: {
      content: {
        "application/json": components["schemas"]["Entity"];
      };
    };
  };
  getEntityById: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Entity"];
        };
      };
      /** Not Found */
      404: unknown;
    };
  };
  validateEntity: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      /** No Content */
      204: never;
      /** Not Found */
      404: unknown;
    };
  };
  getEntitiesUnvalidated: {
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Entity"][];
        };
      };
    };
  };
  createCategory: {
    responses: {
      /** created */
      201: unknown;
    };
    /** Create a Category */
    requestBody: {
      content: {
        "application/json": components["schemas"]["Category"];
      };
    };
  };
  modifyCategory: {
    responses: {
      /** modified */
      201: unknown;
    };
    /** Modify a Category (create a new one) */
    requestBody: {
      content: {
        "application/json": components["schemas"]["Category"];
      };
    };
  };
  disableCategory: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      /** OK */
      200: unknown;
      /** Not Found */
      404: unknown;
    };
  };
  reactivateCategory: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      /** No Content */
      204: never;
      /** Not Found */
      404: unknown;
    };
  };
  updatePasswordAdmin: {
    parameters: {
      path: {
        /** login of User to update */
        login: string;
      };
      query: {
        /** The new password to update */
        password: string;
      };
    };
    responses: {
      /** created */
      201: unknown;
      /** Not Found */
      404: unknown;
    };
  };
  getCategories: {
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Category"][];
        };
      };
    };
  };
  getCategory: {
    parameters: {
      path: {
        /** ID of an existing category */
        id: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Category"];
        };
      };
      /** Not Found */
      404: unknown;
    };
  };
  getAllPublications: {
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Publication"][];
        };
      };
    };
  };
  getAllOffers: {
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Publication"][];
        };
      };
    };
  };
  getAllRequests: {
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Publication"][];
        };
      };
    };
  };
  getMyPublications: {
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Publication"][];
        };
      };
    };
  };
  createPublication: {
    responses: {
      /** created */
      201: unknown;
    };
    /** Create a Publication */
    requestBody: {
      content: {
        "application/json": components["schemas"]["Publication"];
      };
    };
  };
  getMyOffers: {
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Publication"][];
        };
      };
    };
  };
  getMyRequests: {
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Publication"][];
        };
      };
    };
  };
  getPublication: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Publication"];
        };
      };
      /** Not Found */
      404: unknown;
    };
  };
  updatePublication: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      /** No Content */
      204: never;
      /** Not Found */
      404: unknown;
    };
    /** Update an existing Publication */
    requestBody: {
      content: {
        "application/json": components["schemas"]["Publication"];
      };
    };
  };
  closePublication: {
    parameters: {
      path: {
        /** ID of an existing Publication */
        id: string;
      };
    };
    responses: {
      /** OK */
      200: unknown;
      /** Not Found */
      404: unknown;
    };
  };
  reactivatePublication: {
    parameters: {
      path: {
        /** ID of a closed Publication */
        id: string;
      };
    };
    responses: {
      /** OK */
      200: unknown;
      /** Not Found */
      404: unknown;
    };
  };
  getRelatedPublications: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Publication"][];
        };
      };
    };
  };
  sendMessageToUser: {
    parameters: {
      path: {
        login: string;
      };
    };
    responses: {
      /** created */
      201: unknown;
    };
    /** Send a message to a user */
    requestBody: {
      content: {
        "application/json": components["schemas"]["Message"];
      };
    };
  };
  sendMessageToConversation: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      /** created */
      201: unknown;
    };
    /** Send a message to a conversation */
    requestBody: {
      content: {
        "application/json": components["schemas"]["Message"];
      };
    };
  };
  getConversation: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Conversation"];
        };
      };
      /** Not Found */
      404: unknown;
    };
  };
  getConversations: {
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["ConversationOverview"][];
        };
      };
    };
  };
}

export interface external {}
